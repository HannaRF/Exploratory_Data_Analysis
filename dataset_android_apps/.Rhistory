install.packages("ggplot2")
library(ggplot2)
library(ggplot2)
install.packages(gapminder)
install.package("gapminder")
install.packages("gapminder")
library("gapminder")
str(gapminder)
? aggregate
library('dplyr')
install.packages("dplyr")
library('dplyr')
gapminder %>% filter(year==2007)
gapminder
filtered_gapminder <- gapminder %>% filter(year == 2007) %>% filter(continent == 'Americas')
View(filtered_gapminder)
library(ggplot2)
library('ggplot2')
library("ggplot2")
install.packages('ggplot2')
library("ggplot2")
library(readr)
netflix_titles <- read_csv("GitHub/netflix_titles.csv")
View(netflix_titles)
summary(netflix_titles)
View(filtered_gapminder)
View(filtered_gapminder)
View(filtered_gapminder)
unlink(filtered_gapminder)
View(filtered_gapminder)
View(filtered_gapminder,recursive=TRUE)
unlink(filtered_gapminder, recursive = TRUE)
View(filtered_gapminder)
show(filtered_gapminder)
file.remove(filtered_gapminder)
show(netflix_titles)
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
## Exercício 1 - Familiarização com o dplyr
Fazer os exercícios propostos na lista do capítulo sobre dplyr do livro em português indicado por vocês! :)  -- Personalizando a exploração, isto é, buscando na base as informações que mais interessam a cada um de vocês. Ex.: diretor preferido, ator preferido, demais curiosidades que tiverem.
<https://livro.curso-r.com/7-2-dplyr.html>
## Exercício 1 - Familiarização com o dplyr
Exercícios a seguir retirados de <https://livro.curso-r.com/7-2-dplyr.html>
install.packages("dplyr")
library(readr)
imdb <- read_csv("GitHub/imdb.rds")
View(imdb)
View(imdb)
View(imdb)
---
title: "Familiarização com o dplyr - Exercício 1"
author: "Hanna Rodrigues Ferreira"
date: "24/03/2021"
output: html_document
---
install.packages("prettydoc")
### O pipe em ação
a função glimpse() do pacote dplyr printa uma versão transposta da base. É útil para ter uma visão geral das colunas e seus tipos de dados.
A seguir temos alguns exemplos:
imdb <- readr::read_rds("imdb.rds")
knitr::opts_chunk$set(echo = TRUE)
filmes_ordenados <- arrange(imdb, duracao, desc(ano))
É possível então, selecionar colunas e ordenar esta seleção, como mostra o exemplo:
Podemos utilizar a função filter() para filtrar as linhas que concordem com as condições tal como filmes com 90 minutos ou menos de duração e nota no imdb maior do que 8.5, como no exemplo a seguir:
Tal como filmes com 90 minutos ou menos de duração e nota no imdb maior do que 8.5, como no exemplo a seguir:
Ou filmes que tenham “Animation” ou “Sci-Fi” entre os seus gêneros, neste caso usaremos uma função do pacote stringr que procura padrões nas strings. Esses padrões são definidos por expressões regulares (regex), um breve tutorial : <https://medium.com/factory-mind/regex-tutorial-a-simple-cheatsheet-by-examples-649dc1c3f285>
install.packages("stringr")
knitr::opts_chunk$set(echo = TRUE)
glimpse( imdb %>%
filter(str_detect(string = generos, pattern = "Animation")
| str_detect(string = generos, pattern = "Musical"))
)
glimpse(
imdb_prejuizo %>%
filter(prejuizo > 0) %>%
arrange(desc(prejuizo))
)
```{r,echo=FALSE}
googleplaystore <- read.csv("~/GitHub/Exploratory_Data_Analysis/dataset_android_apps/googleplaystore.csv")
View(googleplaystore)
knitr::opts_chunk$set(echo = TRUE)
glimpse(googleplaystore)
getwd()
setwd("~/GitHub/Exploratory_Data_Analysis/dataset_android_apps")
getwd()
getwd()
knitr::opts_chunk$set(echo = TRUE)
```{r,echo=FALSE}
